package org.catacombae.hfsexplorer.types.hfsplus;

import java.io.PrintStream;

import org.catacombae.csjc.DynamicStruct;
import org.catacombae.csjc.StructElements;
import org.catacombae.csjc.StructElements.DictionaryBuilder;
import org.catacombae.csjc.structelements.Dictionary;
import org.catacombae.hfsexplorer.FastUnicodeCompare;
import org.catacombae.hfsexplorer.Util;

/** This class was generated by CStructToJavaClass. */
public class HFSPlusAttributeKey extends BTKey implements DynamicStruct, StructElements{
	/*
	 * struct HFSPlusAttrKey
	 * size: 267 bytes
	 * description: 
	 * 
	 * BP  Size  Type          Identifier  Description                                 
	 * --------------------------------------------------------------------------------
	 * 0   2     UInt16        keyLength   // key length (in bytes)                    
	 * 2   2     UInt16        pad         // set to zero                              
	 * 4   4     UInt32        fileID      // file associated with attribute           
	 * 8   4     UInt32        startBlock  // first allocation block number for extents
	 * 12  255   HFSUniStr255  attrName                                                
	 */
	/*
	kHFSMaxAttrNameLen = 127*/
	public static final int MAX_STRUCTSIZE = 266;

	private final byte[] keyLength = new byte[2];
	private final byte[] pad = new byte[2];
	private final byte[] fileID = new byte[4];
	private final byte[] startBlock = new byte[4];
	private final HFSUniStr255 attrName;	//max size is 127 but whatever

	public HFSPlusAttributeKey(byte[] data, int offset) {
		System.arraycopy(data, offset+0, keyLength, 0, 2);
		System.arraycopy(data, offset+2, pad, 0, 2);
		System.arraycopy(data, offset+4, fileID, 0, 4);
		System.arraycopy(data, offset+8, startBlock, 0, 4);
		attrName = new HFSUniStr255(data, offset+12);
	}
	
    public HFSPlusAttributeKey(int fileID1, HFSUniStr255 attrName1) {
    	System.arraycopy(Util.toByteArrayBE(fileID1),0,fileID,0, 4);
    	attrName = attrName1;
    	System.arraycopy(Util.toByteArrayBE((short)(10+attrName.length())), 0, keyLength, 0, 2);
    }

	public int length() { return getKeyLength() + 2; }

	/** // key length (in bytes) */
	public short getKeyLength() { return Util.readShortBE(keyLength); }
	/** // set to zero */
	public short getPad() { return Util.readShortBE(pad); }
	/** // file associated with attribute */
	public int getFileID() { return Util.readIntBE(fileID); }
	/** // first allocation block number for extents */
	public int getStartBlock() { return Util.readIntBE(startBlock); }
	/**  */
	public HFSUniStr255 getAttrName() { return attrName; }

	public void printFields(PrintStream ps, String prefix) {
		ps.println(prefix + " keyLength: " + getKeyLength());
		ps.println(prefix + " pad: " + getPad());
		ps.println(prefix + " fileID: " + getFileID());
		ps.println(prefix + " startBlock: " + getStartBlock());
		ps.println(prefix + " attrName: ");
		getAttrName().print(ps, prefix+"  ");
	}

	public void print(PrintStream ps, String prefix) {
		ps.println(prefix + "HFSPlusAttrKey:");
		printFields(ps, prefix);
	}

	public byte[] getBytes() {
		byte[] result = new byte[MAX_STRUCTSIZE];
		byte[] tempData;
		int offset = 0;
		System.arraycopy(keyLength, 0, result, offset, keyLength.length); offset += keyLength.length;
		System.arraycopy(pad, 0, result, offset, pad.length); offset += pad.length;
		System.arraycopy(fileID, 0, result, offset, fileID.length); offset += fileID.length;
		System.arraycopy(startBlock, 0, result, offset, startBlock.length); offset += startBlock.length;
		tempData = attrName.getBytes();
		System.arraycopy(tempData, 0, result, offset, tempData.length); offset += tempData.length;
		return result;
	}

	@Override
	public int maxSize() {
		return MAX_STRUCTSIZE;
	}

	@Override
	public int occupiedSize() {
		return length();
	}

	@Override
	public Dictionary getStructElements() {
		DictionaryBuilder db = new DictionaryBuilder(HFSPlusAttributeKey.class.getSimpleName());

		db.addUIntBE("keyLength", keyLength);
		db.addUIntBE("pad", pad);
		db.addUIntBE("fileID", fileID);
		db.addUIntBE("startBlock", startBlock);
		db.add("attrName", attrName.getStructElements());

		return db.getResult();
	}

	@Override
	public int compareTo(BTKey btk) {
		if(btk instanceof HFSPlusAttributeKey) {
			HFSPlusAttributeKey attrKey = (HFSPlusAttributeKey) btk;
			if(getFileID() == attrKey.getFileID())
				return FastUnicodeCompare.compare(attrName.getUnicode(), attrKey.getAttrName().getUnicode());
			else if(getFileID() < attrKey.getFileID())
				return -1;
			else
				return 1;
		}
		else {
			return super.compareTo(btk);
		}
	}
}
